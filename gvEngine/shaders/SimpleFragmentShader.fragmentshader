#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

uniform float LightPower;
uniform vec3 LightColor;
uniform vec3 materialColor;

uniform float AmbientIntensity;

// Ouput data
out vec3 color;

void main()
{
	// Нормаль фрагмента в пространстве камеры
	vec3 n = normalize( Normal_cameraspace );
	// Направление света(от фрагмента к источнику света
	vec3 l = normalize( LightDirection_cameraspace );

	float cosTheta = clamp( dot( n,l ), 0,1 ); 

	float distance = LightDirection_cameraspace.length();



    vec3 E = normalize(EyeDirection_cameraspace);
    // Direction in which the triangle reflects the light
    vec3 R = reflect(-l, n);
    // Cosine of the angle between the Eye vector and the Reflect vector,
    // clamped to 0
    //  - Looking into the reflection -> 1
    //  - Looking elsewhere -> < 1
    float cosAlpha = clamp(dot(E, R), 0, 1);


	// Output color = red 
	color = materialColor * vec3(AmbientIntensity, AmbientIntensity, AmbientIntensity) +
        materialColor * LightColor * LightPower * cosTheta / (distance * distance) +
        materialColor * LightColor * LightPower * pow(cosAlpha,5) / (distance * distance);

}